import os
import urllib
import random
import requests
from model import model_whisper
from telegram import Update
from config import TOKEN
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext
from db_functions import *
from sqlalchemy import create_engine, inspect
from schema import Base
import re

engine = create_engine("postgresql+psycopg2://bot_user:trybetter@postgres:5432/tinkoff_bot_db")
if inspect(engine).has_table("users", schema="public") is False:
    Base.metadata.create_all(engine)

async def start(update: Update, context: CallbackContext):
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="""‚ú®‚ú®‚ú®–ü—Ä–ò–≤–ï—Ç-—ã!‚ú®‚ú®‚ú®\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –º–æ–ª–ß–ê–¢, —è —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ —Å–∫–æ—Ä–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è, –æ–±—â–∞—è—Å—å —Å–æ –º–Ω–æ–π, –ø–æ–∫–∞ —Ç—ã –ª–µ—Ç–∏—à—å –≤ –°–æ—á–∏!
                                           \n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!üòé \n –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é, –Ω–∞–ø–∏—à–∏ /help""")

async def help(update: Update, context: CallbackContext):
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="""–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?üëæ\n –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è üí¨ 
                                   \n –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —á–∏—Å—Ç–∏—Ç –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /clean üßπ""")

async def answer(update: Update, context: CallbackContext):
    user_id = update.message.from_user['username']
    add_user(user_id)
    if len(update.message.text) != 0:
        msg = update.message.text
        msg = urllib.parse.unquote(msg)
        curr_context = get_context(user_id)
        curr_context = curr_context if curr_context.endswith("@@–ü–ï–†–í–´–ô@@") else curr_context + "@@–ü–ï–†–í–´–ô@@"
        curr_context = curr_context.lstrip() + f" {msg}" + "@@–í–¢–û–†–û–ô@@"
        answer = requests.get(f"http://server:4321/api/{curr_context}")
        answer.encoding = "utf-8"
        remove_context(user_id)
        add_context(user_id, answer.text)
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=answer.text.split("@@–í–¢–û–†–û–ô@@")[-1].split("@@–ü–ï–†–í–´–ô@@")[0])

    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

async def answer_audio(update: Update, context: CallbackContext):
    user_id = update.message.from_user['username']
    add_user(user_id)
    audiofile = await context.bot.get_file(update.message.voice.file_id)
    output = random.randint(1, 1000)
    await audiofile.download_to_drive(f"{output}.wav")
    try:
        msg = model_whisper.transcribe(f"{output}.wav")['text']
        curr_context = get_context(user_id)
        curr_context = curr_context if curr_context.endswith("@@–ü–ï–†–í–´–ô@@") else curr_context + "@@–ü–ï–†–í–´–ô@@"
        curr_context = curr_context + f" {msg}" + " @@–í–¢–û–†–û–ô@@"
        answer = requests.get(f"http://server:4321/api/{curr_context}")
        answer.encoding = "utf-8"
        remove_context(user_id)
        add_context(user_id, answer.text)
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=answer.text.split("@@–í–¢–û–†–û–ô@@")[-1].split("@@–ü–ï–†–í–´–ô@@")[0])
        os.remove(f"{output}.wav")
    except:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!ü•π")
        os.remove(f"{output}.wav")

async def clean(update: Update, context: CallbackContext):
    user_id = update.message.from_user['username']
    remove_context(user_id)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!üßπ")

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    start_handler = CommandHandler('start', start)
    help_handler = CommandHandler('help', help)
    dialog_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), answer)
    audio_handler = MessageHandler(filters.VOICE, answer_audio)
    clean_handler = CommandHandler('clean', clean)

    app.add_handler(start_handler)

    app.add_handler(help_handler)

    app.add_handler(dialog_handler)

    app.add_handler(audio_handler)

    app.run_polling()